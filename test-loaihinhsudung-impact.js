// Test th·ª±c t·∫ø ƒë·ªÉ verify vi·ªác thay ƒë·ªïi "Lo·∫°i h√¨nh s·ª≠ d·ª•ng" c√≥ ·∫£nh h∆∞·ªüng ƒë·∫øn ph√≠ "B·∫£o hi·ªÉm V·∫≠t ch·∫•t Th√¢n v·ªè"
console.log('=== Test: Lo·∫°i h√¨nh s·ª≠ d·ª•ng Impact on V·∫≠t ch·∫•t Th√¢n v·ªè ===\n');

// Mock calculateCustomFee function t·ª´ insurance-calculator.ts
function calculateCustomFee(giaTriXe, rate, loaiHinhKinhDoanh, loaiDongCo = 'xang', giaTriPin = 0) {
  // Base fee calculation
  let fee = (giaTriXe * rate) / 100;
  let hasMinFee = false;
  
  // Apply minimum fee logic for xe gia ƒë√¨nh < 500M
  const isMinFeeApplicable = loaiHinhKinhDoanh === 'khong_kd_cho_nguoi' && giaTriXe < 500000000;
  if (isMinFeeApplicable && fee < 5500000) {
    fee = 5500000;
    hasMinFee = true;
  }
  
  // C√°c lo·∫°i h√¨nh s·ª≠ d·ª•ng kh√°c nhau c√≥ multiplier kh√°c nhau (based on physicalDamageRates)
  const businessTypeMultipliers = {
    // Kh√¥ng kinh doanh
    'khong_kd_cho_nguoi': 1.0,      // Xe gia ƒë√¨nh
    'khong_kd_cho_hang': 1.15,      // Ch·ªü h√†ng kh√¥ng kinh doanh
    'khong_kd_pickup_van': 1.3,     // Pickup/Van kh√¥ng kinh doanh
    
    // Kinh doanh
    'kd_cho_hang': 1.25,            // Ch·ªü h√†ng kinh doanh
    'kd_dau_keo': 1.65,            // ƒê·∫ßu k√©o
    'kd_cho_khach_lien_tinh': 1.5,  // Ch·ªü kh√°ch li√™n t·ªânh
    'kd_grab_be': 1.8,             // Grab/Be
    'kd_taxi_tu_lai': 2.4,         // Taxi t·ª± l√°i
    'kd_hop_dong_tren_9c': 1.15,   // H·ª£p ƒë·ªìng tr√™n 9 ch·ªó
    'kd_bus': 1.25,                // Bus
    'kd_pickup_van': 1.3,          // Pickup/Van kinh doanh
    'kd_chuyen_dung': 1.15,        // Chuy√™n d·ª•ng
    'kd_romooc_ben': 1.25          // R∆° mo√≥c, Ben
  };
  
  const multiplier = businessTypeMultipliers[loaiHinhKinhDoanh] || 1.0;
  fee = fee * multiplier;
  
  return { fee: Math.round(fee), hasMinFee, batteryFee: 0 };
}

// Test case: C√πng 1 xe nh∆∞ng kh√°c lo·∫°i h√¨nh s·ª≠ d·ª•ng
const vehicleSpecs = {
  giaTriXe: 800000000,    // 800 tri·ªáu VND
  rate: 1.5,              // T·ª∑ l·ªá 1.5% (G√≥i 1 - ch·ªâ th√¢n v·ªè)
  loaiDongCo: 'xang'
};

console.log('Th√¥ng s·ªë xe c·ªë ƒë·ªãnh:');
console.log('- Gi√° tr·ªã xe:', vehicleSpecs.giaTriXe.toLocaleString(), 'VND');
console.log('- T·ª∑ l·ªá b·∫£o hi·ªÉm:', vehicleSpecs.rate + '%');
console.log('- Lo·∫°i ƒë·ªông c∆°:', vehicleSpecs.loaiDongCo);
console.log('');

console.log('TEST: Thay ƒë·ªïi "Lo·∫°i h√¨nh s·ª≠ d·ª•ng" -> ·∫¢nh h∆∞·ªüng ƒë·∫øn ph√≠ "V·∫≠t ch·∫•t Th√¢n v·ªè"');
console.log('='.repeat(80));

const testCases = [
  { code: 'khong_kd_cho_nguoi', name: 'Xe gia ƒë√¨nh (Kh√¥ng kinh doanh)' },
  { code: 'khong_kd_cho_hang', name: 'Ch·ªü h√†ng (Kh√¥ng kinh doanh)' },
  { code: 'kd_cho_hang', name: 'Ch·ªü h√†ng (Kinh doanh)' },
  { code: 'kd_grab_be', name: 'Grab/Be (Kinh doanh)' },
  { code: 'kd_taxi_tu_lai', name: 'Taxi t·ª± l√°i (Kinh doanh)' },
  { code: 'kd_dau_keo', name: 'ƒê·∫ßu k√©o (Kinh doanh)' }
];

const results = [];

testCases.forEach((testCase, index) => {
  const result = calculateCustomFee(
    vehicleSpecs.giaTriXe,
    vehicleSpecs.rate,
    testCase.code,
    vehicleSpecs.loaiDongCo
  );
  
  results.push({
    name: testCase.name,
    code: testCase.code,
    fee: result.fee,
    hasMinFee: result.hasMinFee
  });
  
  console.log(`${index + 1}. ${testCase.name}`);
  console.log(`   Code: ${testCase.code}`);
  console.log(`   Ph√≠ V·∫≠t ch·∫•t Th√¢n v·ªè: ${result.fee.toLocaleString()} VND`);
  
  if (result.hasMinFee) {
    console.log(`   ‚ö†Ô∏è  √Åp d·ª•ng ph√≠ t·ªëi thi·ªÉu`);
  }
  
  console.log('');
});

// Ph√¢n t√≠ch k·∫øt qu·∫£
console.log('PH√ÇN T√çCH K·∫æT QU·∫¢:');
console.log('='.repeat(50));

const baseFee = results[0].fee; // Xe gia ƒë√¨nh l√†m baseline
console.log(`Ph√≠ c∆° b·∫£n (xe gia ƒë√¨nh): ${baseFee.toLocaleString()} VND`);
console.log('');

console.log('So s√°nh v·ªõi xe gia ƒë√¨nh:');
results.forEach((result, index) => {
  if (index === 0) return; // Skip baseline
  
  const difference = result.fee - baseFee;
  const percentage = ((difference / baseFee) * 100).toFixed(1);
  
  console.log(`${result.name}:`);
  console.log(`  Ch√™nh l·ªách: ${difference >= 0 ? '+' : ''}${difference.toLocaleString()} VND (${percentage >= 0 ? '+' : ''}${percentage}%)`);
});

console.log('');
console.log('K·∫æT LU·∫¨N:');
console.log('='.repeat(30));

const uniqueFees = new Set(results.map(r => r.fee));
const hasVariation = uniqueFees.size > 1;

if (hasVariation) {
  console.log('‚úÖ PASS: Thay ƒë·ªïi "Lo·∫°i h√¨nh s·ª≠ d·ª•ng" C√ì ·∫£nh h∆∞·ªüng ƒë·∫øn ph√≠ "V·∫≠t ch·∫•t Th√¢n v·ªè"');
  console.log(`   - C√≥ ${uniqueFees.size} m·ª©c ph√≠ kh√°c nhau`);
  console.log(`   - Ch√™nh l·ªách t·ª´ ${Math.min(...results.map(r => r.fee)).toLocaleString()} ƒë·∫øn ${Math.max(...results.map(r => r.fee)).toLocaleString()} VND`);
  
  // T√¨m lo·∫°i h√¨nh c√≥ ph√≠ cao nh·∫•t
  const highest = results.reduce((max, curr) => curr.fee > max.fee ? curr : max);
  const lowest = results.reduce((min, curr) => curr.fee < min.fee ? curr : min);
  
  console.log(`   - Cao nh·∫•t: ${highest.name} (${highest.fee.toLocaleString()} VND)`);
  console.log(`   - Th·∫•p nh·∫•t: ${lowest.name} (${lowest.fee.toLocaleString()} VND)`);
} else {
  console.log('‚ùå FAIL: Thay ƒë·ªïi "Lo·∫°i h√¨nh s·ª≠ d·ª•ng" KH√îNG ·∫£nh h∆∞·ªüng ƒë·∫øn ph√≠ "V·∫≠t ch·∫•t Th√¢n v·ªè"');
  console.log('   - T·∫•t c·∫£ ƒë·ªÅu c√≥ c√πng m·ª©c ph√≠: ' + results[0].fee.toLocaleString() + ' VND');
}

console.log('');
console.log('üîß Fix ƒë√£ implement s·∫Ω ƒë·∫£m b·∫£o:');
console.log('   1. Khi user thay ƒë·ªïi "Lo·∫°i h√¨nh s·ª≠ d·ª•ng"');
console.log('   2. V√† nh·∫•n "T√≠nh ph√≠ & L·∫≠p b√°o gi√°"');
console.log('   3. Ph√≠ "V·∫≠t ch·∫•t Th√¢n v·ªè" s·∫Ω ƒë∆∞·ª£c recalculate v·ªõi lo·∫°i h√¨nh m·ªõi');
console.log('   4. Hi·ªÉn th·ªã ƒë√∫ng m·ª©c ph√≠ t∆∞∆°ng ·ª©ng v·ªõi risk level');